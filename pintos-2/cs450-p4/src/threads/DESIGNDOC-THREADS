                    +-----------------------+
                    |         CS 450        |
                    | PROJECT 4: SCHEDULING |
                    |    DESIGN DOCUMENT    |
                    +-----------------------+

---- INSTRUCTIONS ----

>> Complete the answers to the questions in a succinct, precise
>> manner.  Copy this file into your pintos/src/threads directory
>> and add it to your Hg repository.

>> Recall that this document accounts for 50% of your grade for
>> this project, so you should put considerable thought into your
>> answers.  If your answer is vague (e.g., "We fix this problem by
>> doing stuff."), your score WILL suffer.  In particular, your
>> rationale answers MUST provide a specific alternative design
>> along with a CLEAR explanation of why your approach is superior.
>> For instance, if your approach employs a data structure with
>> O(1) average overhead while another would require O(n) work,
>> you should provide these details.  Finally, your writing should
>> be well-organized (i.e., use proper grammar) and properly
>> formatted to match the line lengths of the original documentation.
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Team name:  gudimepg
Members:    Gudimetta, Pavan
            Winters, Patrick
            Turnbull, Conner
            Rosen, Mickey

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the JMU Pintos documentation,
>> course text, lecture notes, and course staff.


			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1:  What data structure(s) and/or global variables do you use to
>> keep track of thread priorities?  Copy the declaration of each here,
>> including a brief description of its purpose (25 words or less).
>> Furthermore, explain how this data structure is used by the
>> scheduler to select the correct thread.

>> B2:  One of the problems with basic priority scheduling is that it
>> can lead to priority inversion.  For instance, assume that a high
>> priority thread (H) is waiting on a lock that a low priority
>> thread (L) has.  This matter can be complicated further if there
>> is a medium priority thread (M) also executing.  In that case,
>> H is blocked (waiting on the lock), so M gets to execute.  This
>> defeats the purpose of H having a higher priority!

>> One solution to priority inversion is priority donation.  In that
>> case, the high priority thread may temporarily raise the priority
>> level of another thread (i.e., "donate" its high priority level)
>> to get the lock sooner.  For instance, in the previous scenario,
>> H could donate its priority to L, thereby giving L a higher
>> priority level than M.  Consequently, L would get to execute until
>> it releases the lock.  Once the lock is released, L's priority
>> would return to its previous (low) level.

>> Describe a data structure that could be used to implement priority
>> donation.  Keep in mind that you must also keep track of the
>> thread's original (base) priority level.

---- ALGORITHMS ----

>> B3:  Locks, semaphores, and condition variables all maintain a list
>> of waiting threads.  How do you ensure that the highest priority
>> waiting thread is scheduled first?

>> B4:  Any thread scheduling mechanism must be efficient.  How do
>> you minimize the amount of performance overhead when selecting the
>> highest priority thread for scheduling?  Describe the overhead
>> cost of your algorithm.  Make sure you address both the average
>> and worst-case scenarios.

>> B5:  Returning to priority donation, describe an algorithm for
>> lowering a thread's priority after releasing a lock.  For
>> instance, assume that H and M have both donated priority to L.
>> When L releases a lock, what should its priority become?  Does it
>> matter if H and M were waiting on the same lock?  What if they
>> were waiting on different locks?

>> B6:  Consider the case of a nested priority donation.  That is,
>> assume M acquires lock K1, then tries to acquire lock K2.  However,
>> L has previous acquired K2.  As a result, M donates its priority
>> to L.  Next, H arrives and requests K1.  Describe what would need
>> to happen, and what happens when L releases K2.

---- RATIONALE ----

>> B7:  Describe an alternative approach that could have been used to
>> solve this problem.  Include specific information about the data
>> structures, algorithms, and synchronization techniques that would
>> have been required.  Explain why you chose to implement the design
>> that you did.


