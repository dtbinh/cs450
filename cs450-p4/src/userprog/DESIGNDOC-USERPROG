                     +--------------------------+
                     |         CS 450           |
                     | PROJECT 2: USER PROGRAMS |
                     |     DESIGN DOCUMENT      |
                     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

                           ARGUMENT PASSING
                           ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration. Identify the purpose of each in 25 words or less.


---- ALGORITHMS ----

>> A2: Briefly but PRECISELY describe how you implemented argument parsing.
>> How do you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?


---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?


>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments. In Unix-like systems, the shell does this separation.
>> Describe at least two advantages of the Unix approach.


---- SYNCHRONIZATION ----

>> A5: The base implementation of process_execute() returns without
>> waiting on the new executable to finish loading. As a result, Pintos
>> would shut down before the program ever ran. Copy your code for
>> synchronizing this timing here, and explain precisely how it works.
>> What happens if the command-line specifies an executable that does
>> not exist?



                             SYSTEM CALLS
                             ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration. Identify the purpose of each in 25 words or less.


---- ALGORITHMS ----

>> B2: Describe your code for validating user buffers. In particular,
>> when a user-mode program passes parameters to the "read" and "write"
>> system calls, how do you validate the entire buffer? Note that the
>> system call parameters specify where the buffer starts, but you need
>> to validate the entire thing is in user memory and is mapped into the
>> virtual memory space (e.g., by using pagedir_get_page()).


>> B3: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel. What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result? What about
>> for a system call that only copies 2 bytes of data? Is there room
>> for improvement in these numbers, and how much?



                           SURVEY QUESTIONS
                           ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any part of it, too easy or
>> hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Any other comments?
