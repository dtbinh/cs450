                     --------------------------+
                     |         CS 450           |
                     | PROJECT 2: SYSTEM CALLS  |
                     |     DESIGN DOCUMENT      |
                     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Pavan Gudimetta gudimepg@dukes.jmu.edu
Patrick Winters winterpa@dukes.jmu.edu
Conner Turnbull turnbucc@dukes.jmu.edu
Mickey Rosen rosenmb@dukes.jmu.edu

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.


                             SYSTEM CALLS
                             ============

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

typedef struct
{
	int exit_status;/*Exit status*/
	tid_t tid;/*thread id*/
	struct list_elem elem;/*element of the list to be placed in "limbo" list*/
	bool is_waiting;/*see if the thread is waiting*/
	struct condition* cond;/**/
} dead_thread_t;

Structure for a thread right before it dies. Primarily different from a normal
thread struct due to its ability to check its status (ie dead v waiting).

---- ALGORITHMS ----

>> A2: The wait() system call is very tricky, due to the complicated
>> nature of the timing of events. As a starting point, assume thread A
>> is the parent of thread B and A calls wait() to wait on B. If thread
>> B is still running, A becomes blocked until B calls exit(). How do
>> you accomplish this? Here is the trickier case: What if B had already
>> exited prior to A calling wait()? At that point, A must be able to
>> confirm that B was one of its children, but the struct thread for B
>> might not exist anymore. Describe your algorithms for both wait() and
>> exit() in precise terms, indicating how the two system calls work
>> together.

We used a dynamically allocated list called "limbo" where our dead children were
stored. This was used in conjunction with our "youngins" list which represented
the alive children. If A calls on B to wait, we would check if A and B are currently
alive and then check to see if they have exited yet. If they have, they would 
return their exit status to process_wait and if they still have not exited,
then the parent would continue to wait on its children. Wait and exit are two 
halves of a whole that make up the wait system call. Wait relies on exit to produce
an exit status and wait relies on produced exit-statuses from exit leading it to 
be a particular issue when attempting to correctly identifying they work
together in the context of synchronization and implementing the wait system call.

---- RATIONALE ----

>> A3: To perform reads and writes to the file system, you must maintain
>> a mapping between file descriptors--integers that the user-mode
>> program sees--and pointers to internal file structures--which are
>> invisible to the user-mode program. There are a couple of approaches
>> to this. For instance, you can have a global (struct file *) array
>> and use the file descriptors as an index into the array.
>> Alternatively, you could have such an array within the thread
>> structure. Lastly, you could just create a linked list. What are the
>> advantages and/or disadvantages of the approach you adopted? Note
>> that, in all cases, you MUST prevent collisions. For instance, if
>> thread A opens file foo.txt and gets file descriptor 2, thread B
>> must NOT be able to pass 2 as a file descriptor and read or write to
>> foo.txt (unless B has also opened foo.txt). How do you validate that
>> the file descriptor passed from the user-mode program is okay?

We use a struct file* array within each thread to contain a user-mode program's
relevant files.While using linked list could be a more 'elegant' way of storing
files, it would require the usage of malloc in order to keep files persistent. 
This will lead to further complication with memory management and validation of
the user-mode files being translated from the user-mode process to the kernel.
While the global file* array would be a 'cheap' way to keep track of the related
file-descriptors for each user-mode process, this would highly be inefficient
as well as dangerous due to the fact that there is no actual access control to
keep an eye on which process is accessing the array at one time. This can lead
to major consequences if multiple files access the array at the same time.In 
addition, this would violate the Readers-Writers synchronization problem
due to the fact that there is no direct access control.
(We rebel against our lords of Toyota ;))

>> A4: The wait() system call requires establishing a parent-child
>> relationship between threads that doesn't otherwise exist. Explain
>> how you created this and why you selected the approach that you did.

We used two doubly linked list approach to manage the parent-child relationship.
One to represent the alive children ("youngins") and the other ("limbo") to 
represent the child before and after they have died(ie terminated/exited)
We insert our alive children into the "youngins" list in when each new child
user-mode process after it gets created in process_execute(). After that, we
then place the dead children into the "limbo" list.  This approach reduces 
collision between alive and dead children and allows for easy checking between
both lists. 

---- SYNCHRONIZATION ----

>> A5: Access the file system is a straightforward example of the
>> readers-writers problem. Explain how your implementation applies a
>> known solution to this problem. Do you synchronize access to individual
>> files or to then entire file system as a whole? What are the relative
>> advantages of these two approaches?

Our implementation use a series of locks and semaphores to lock down each writer
and reader when they conducted their own respective operations.We synchronize
the file access for each thread rather than synchronize the entire file-system
itself in order to increased efficiency.

>> A6: When a process begins executing, the executable file must be loaded
>> into memory, which can take time. How do you ensure that the file cannot
>> be changed by any other process during this time?

We use a mutex or lock to for each process that calls process_execute and ensures
that each process must release their lock before another process can access 
the load function. 


                           SURVEY QUESTIONS
                           ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

Pavan: I would say that this project was a mix between easy and hard since the
most of the system-call implementations relied on using previously known knowledge 
about other implemented system calls. The hard part was properly implementing 
the wait system call since there were a variety of factors that needed to be
considered in for it to work. 

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?
Pavan: Honestly, pretty much debugging Pintos through each system call as well
as through implementing and debugging the wait system call gave me a further 
understanding about how a system call actually handles dealing with multiple 
processes. 

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?
Pavan: I wish I had more proper documentation of Pintos since its hard to actually
determine what the purpose of some inane and unique functions of pintos.

>> Any other comments?

